{"ast":null,"code":"import * as React from 'react';\nfunction queriesDidChange(prevQueries, nextQueries) {\n  if (nextQueries === prevQueries) return false;\n  const nextQueriesArr = Object.values(nextQueries);\n  const prevQueriesArr = Object.values(prevQueries);\n  if (nextQueriesArr.length !== prevQueriesArr.length) return true;\n  if (nextQueriesArr.some((q, i) => q !== prevQueriesArr[i])) return true;\n  const prevKeys = Object.keys(prevQueries);\n  return Object.keys(nextQueries).some((n, i) => n !== prevKeys[i]);\n}\nfunction _ref(curr, key) {\n  curr.matches[key] = false;\n  curr.mediaQueries[key] = {};\n  return curr;\n}\nfunction init(queries) {\n  const queryKeys = Object.keys(queries);\n  /* istanbul ignore next */\n\n  if (typeof window === 'undefined') return queryKeys.reduce(_ref, {\n    mediaQueries: {},\n    matches: {}\n  });\n  return queryKeys.reduce((state, name) => {\n    const mql = window.matchMedia(queries[name]);\n    state.mediaQueries[name] = mql;\n    state.matches[name] = mql.matches;\n    return state;\n  }, {\n    mediaQueries: {},\n    matches: {}\n  });\n}\nfunction reducer(state, action) {\n  function _ref2(prev, key) {\n    prev[key] = state.mediaQueries[key].matches;\n    return prev;\n  }\n  switch (action.type) {\n    case 'updateMatches':\n      return {\n        matches: Object.keys(state.mediaQueries).reduce(_ref2, {}),\n        mediaQueries: state.mediaQueries\n      };\n    case 'setQueries':\n      return init(action.queries);\n  }\n}\n/**\n * A hook that returns a [`MediaQueryMatches`](#mediaquerymatches) object which will\n * tell you if specific media queries matched, all media queries matched, or\n * any media queries matched. Matches in this hook will always return `false` when\n * rendering on the server.\n *\n * @param queryMap The media queries you want to match against e.g. `{screen: \"screen\", width: \"(min-width: 12em)\"}`\n */\n\nexport function useMediaQueries(queryMap) {\n  const prevQueries = React.useRef(queryMap);\n  const [state, dispatch] = React.useReducer(reducer, queryMap, init);\n  React.useEffect(() => {\n    if (queriesDidChange(queryMap, prevQueries.current)) {\n      dispatch({\n        type: 'setQueries',\n        queries: queryMap\n      });\n      prevQueries.current = queryMap;\n    }\n  }, [queryMap]);\n  function _ref3() {\n    return dispatch({\n      type: 'updateMatches'\n    });\n  }\n  function _ref4(mq) {\n    const callback = _ref3;\n    if (typeof mq.addListener !== 'undefined') mq.addListener(callback);else mq.addEventListener('change', callback);\n    return callback;\n  }\n  React.useEffect(() => {\n    const queries = Object.values(state.mediaQueries);\n    const callbacks = queries.map(_ref4);\n    function _ref5(mq, i) {\n      if (typeof mq.addListener !== 'undefined') mq.removeListener(callbacks[i]);else mq.removeEventListener('change', callbacks[i]);\n    }\n    return () => {\n      queries.forEach(_ref5);\n    };\n  }, [state.mediaQueries]);\n  const {\n    matches\n  } = state;\n  const matchValues = React.useMemo(() => Object.values(matches), [matches]);\n  return {\n    matches,\n    matchesAny: matchValues.some(Boolean),\n    matchesAll: matchValues.length > 0 && matchValues.every(Boolean)\n  };\n}\n/**\n * A hook that returns `true` if the media query matched and `false` if not. This\n * hook will always return `false` when rendering on the server.\n *\n * @param query The media query you want to match against e.g. `\"only screen and (min-width: 12em)\"`\n */\n\nexport function useMediaQuery(query) {\n  return useMediaQueries(getObj(query)).matchesAll;\n}\nconst cache = {};\nfunction getObj(query) {\n  if (cache[query] === void 0) cache[query] = {\n    default: query\n  };\n  return cache[query];\n}","map":{"version":3,"names":["React","queriesDidChange","prevQueries","nextQueries","nextQueriesArr","Object","values","prevQueriesArr","length","some","q","i","prevKeys","keys","n","_ref","curr","key","matches","mediaQueries","init","queries","queryKeys","window","reduce","state","name","mql","matchMedia","reducer","action","_ref2","prev","type","useMediaQueries","queryMap","useRef","dispatch","useReducer","useEffect","current","_ref3","_ref4","mq","callback","addListener","addEventListener","callbacks","map","_ref5","removeListener","removeEventListener","forEach","matchValues","useMemo","matchesAny","Boolean","matchesAll","every","useMediaQuery","query","getObj","cache","default"],"sources":["C:/Users/User/Downloads/diploma/node_modules/@react-hook/media-query/dist/module/index.js"],"sourcesContent":["import * as React from 'react';\n\nfunction queriesDidChange(prevQueries, nextQueries) {\n  if (nextQueries === prevQueries) return false;\n  const nextQueriesArr = Object.values(nextQueries);\n  const prevQueriesArr = Object.values(prevQueries);\n  if (nextQueriesArr.length !== prevQueriesArr.length) return true;\n  if (nextQueriesArr.some((q, i) => q !== prevQueriesArr[i])) return true;\n  const prevKeys = Object.keys(prevQueries);\n  return Object.keys(nextQueries).some((n, i) => n !== prevKeys[i]);\n}\n\nfunction _ref(curr, key) {\n  curr.matches[key] = false;\n  curr.mediaQueries[key] = {};\n  return curr;\n}\n\nfunction init(queries) {\n  const queryKeys = Object.keys(queries);\n  /* istanbul ignore next */\n\n  if (typeof window === 'undefined') return queryKeys.reduce(_ref, {\n    mediaQueries: {},\n    matches: {}\n  });\n  return queryKeys.reduce((state, name) => {\n    const mql = window.matchMedia(queries[name]);\n    state.mediaQueries[name] = mql;\n    state.matches[name] = mql.matches;\n    return state;\n  }, {\n    mediaQueries: {},\n    matches: {}\n  });\n}\n\nfunction reducer(state, action) {\n  function _ref2(prev, key) {\n    prev[key] = state.mediaQueries[key].matches;\n    return prev;\n  }\n\n  switch (action.type) {\n    case 'updateMatches':\n      return {\n        matches: Object.keys(state.mediaQueries).reduce(_ref2, {}),\n        mediaQueries: state.mediaQueries\n      };\n\n    case 'setQueries':\n      return init(action.queries);\n  }\n}\n/**\n * A hook that returns a [`MediaQueryMatches`](#mediaquerymatches) object which will\n * tell you if specific media queries matched, all media queries matched, or\n * any media queries matched. Matches in this hook will always return `false` when\n * rendering on the server.\n *\n * @param queryMap The media queries you want to match against e.g. `{screen: \"screen\", width: \"(min-width: 12em)\"}`\n */\n\n\nexport function useMediaQueries(queryMap) {\n  const prevQueries = React.useRef(queryMap);\n  const [state, dispatch] = React.useReducer(reducer, queryMap, init);\n  React.useEffect(() => {\n    if (queriesDidChange(queryMap, prevQueries.current)) {\n      dispatch({\n        type: 'setQueries',\n        queries: queryMap\n      });\n      prevQueries.current = queryMap;\n    }\n  }, [queryMap]);\n\n  function _ref3() {\n    return dispatch({\n      type: 'updateMatches'\n    });\n  }\n\n  function _ref4(mq) {\n    const callback = _ref3;\n    if (typeof mq.addListener !== 'undefined') mq.addListener(callback);else mq.addEventListener('change', callback);\n    return callback;\n  }\n\n  React.useEffect(() => {\n    const queries = Object.values(state.mediaQueries);\n    const callbacks = queries.map(_ref4);\n\n    function _ref5(mq, i) {\n      if (typeof mq.addListener !== 'undefined') mq.removeListener(callbacks[i]);else mq.removeEventListener('change', callbacks[i]);\n    }\n\n    return () => {\n      queries.forEach(_ref5);\n    };\n  }, [state.mediaQueries]);\n  const {\n    matches\n  } = state;\n  const matchValues = React.useMemo(() => Object.values(matches), [matches]);\n  return {\n    matches,\n    matchesAny: matchValues.some(Boolean),\n    matchesAll: matchValues.length > 0 && matchValues.every(Boolean)\n  };\n}\n/**\n * A hook that returns `true` if the media query matched and `false` if not. This\n * hook will always return `false` when rendering on the server.\n *\n * @param query The media query you want to match against e.g. `\"only screen and (min-width: 12em)\"`\n */\n\nexport function useMediaQuery(query) {\n  return useMediaQueries(getObj(query)).matchesAll;\n}\nconst cache = {};\n\nfunction getObj(query) {\n  if (cache[query] === void 0) cache[query] = {\n    default: query\n  };\n  return cache[query];\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}